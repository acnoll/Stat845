km_ltTableRow$tj=time
#count how many events at time
km_ltTableRow$ej=events
#count how many censured at time
km_ltTableRow$cj=censored
km_ltTableRow$nj=truncated_at_risk
#sum events and number censored at time
km_ltTableRow[c("c_tj-1")]=paste0(numerator,"/",denominator)
km_ltTableRow$s_tj=round((numerator/denominator)*as.numeric(km_ltTable[dim(km_ltTable)[1],c("s_tj")]),4)
if (km_ltTableRow$ej>0 | km_ltTableRow$s_tj==1){
#add row to km_lttable
km_ltTable=rbind(km_ltTable,km_ltTableRow)
}
}
km_ltTable
}
df2_lec_LT=getKM_LT_Table(df2_lec,1)
df2_lec_LT
df2_lec_censored_noLT_KM
kmTable=data.frame()
getKMTableNoCensorRemoval = function(censoredTimesVector,censorSymbol){
#get numeric representation of censor vector
censoredTimesVectorNumeric=as.numeric(sub(censorSymbol,'',censoredTimesVector,fixed=TRUE))
#count number of actual rows in KM table
cnt_n=length(censoredTimesVectorNumeric)
#create first row of KM table
kmTable=setNames(data.frame(matrix(nrow=1,c(0,0,0,cnt_n,as.character("-"),as.character(paste0(cnt_n,"/",cnt_n)),1)),stringsAsFactors=FALSE),c("orderedEventTimes_tj","eventsAtEventTime_ej",
"censoredObservationsInInterval_cj","inRiskSetAtTime_nj","kaplanMeirSurvivalCurveAtTime_s_tj-1","c_tj-1","kaplanMeirSurvivalCurveAtTime_s_tj"))
# orderedIndices=order(censoredTimesVectorNumeric)
# censoredTimesVectorNumeric=censoredTimesVectorNumeric[orderedIndices]
# censoredTimesVector=censoredTimesVector[orderedIndices]
censoredTimesVectorNumeric=sort(censoredTimesVectorNumeric)
for (i in 1:max(censoredTimesVectorNumeric)){
if(i %in% censoredTimesVectorNumeric){
#create empty row to fill in
kmTableRow=setNames(data.frame(matrix(NA,nrow=1,ncol=length(names(kmTable)))),names(kmTable))
kmTableRow$orderedEventTimes_tj=i
#count how many events at time
kmTableRow$eventsAtEventTime_ej=length(which(censoredTimesVector==i))
#count how many censured at time
kmTableRow$censoredObservationsInInterval_cj=length(which(censoredTimesVector==paste0(i,censorSymbol)))
kmTableRow$inRiskSetAtTime_nj=cnt_n
#sum events and censored
loss=kmTableRow$eventsAtEventTime_ej+kmTableRow$censoredObservationsInInterval_cj
kmTableRow[c("kaplanMeirSurvivalCurveAtTime_s_tj-1")]=kmTable[dim(kmTable)[1],c("kaplanMeirSurvivalCurveAtTime_s_tj")]
#TOOK LAZY WAY OUT AND JUST ADDED BACK IN THE CENSORED OBS - WILL DO CORRECT WAY LATER I Hope
numerator=(cnt_n-loss+kmTableRow$censoredObservationsInInterval_cj)
denominator=cnt_n
kmTableRow[c("c_tj-1")]=paste0(numerator,"/",denominator)
kmTableRow$kaplanMeirSurvivalCurveAtTime_s_tj=round(numerator/denominator*as.numeric(kmTable[dim(kmTable)[1],c("s_tj")]),3)
#update count
cnt_n=cnt_n-loss
#don't add a row when no events 0 should put this at top but no time :0
if (kmTableRow$eventsAtEventTime_ej>0 | cnt_n==length(censoredTimesVectorNumeric)){
#add row to kmtable
kmTable=rbind(kmTable,kmTableRow)
}
}
}
kmTable
}
df2_lec_censored_noLT_KM=getKMTableNoCensorRemoval(df2_lec_censored_noLT,"+")
kmTable=data.frame()
getKMTableNoCensorRemoval = function(censoredTimesVector,censorSymbol){
#get numeric representation of censor vector
censoredTimesVectorNumeric=as.numeric(sub(censorSymbol,'',censoredTimesVector,fixed=TRUE))
#count number of actual rows in KM table
cnt_n=length(censoredTimesVectorNumeric)
#create first row of KM table
kmTable=setNames(data.frame(matrix(nrow=1,c(0,0,0,cnt_n,as.character("-"),as.character(paste0(cnt_n,"/",cnt_n)),1)),stringsAsFactors=FALSE),c("orderedEventTimes_tj","eventsAtEventTime_ej",
"censoredObservationsInInterval_cj","inRiskSetAtTime_nj","kaplanMeirSurvivalCurveAtTime_s_tj-1","c_tj-1","kaplanMeirSurvivalCurveAtTime_s_tj"))
# orderedIndices=order(censoredTimesVectorNumeric)
# censoredTimesVectorNumeric=censoredTimesVectorNumeric[orderedIndices]
# censoredTimesVector=censoredTimesVector[orderedIndices]
censoredTimesVectorNumeric=sort(censoredTimesVectorNumeric)
for (i in 1:max(censoredTimesVectorNumeric)){
if(i %in% censoredTimesVectorNumeric){
#create empty row to fill in
kmTableRow=setNames(data.frame(matrix(NA,nrow=1,ncol=length(names(kmTable)))),names(kmTable))
kmTableRow$orderedEventTimes_tj=i
#count how many events at time
kmTableRow$eventsAtEventTime_ej=length(which(censoredTimesVector==i))
#count how many censured at time
kmTableRow$censoredObservationsInInterval_cj=length(which(censoredTimesVector==paste0(i,censorSymbol)))
kmTableRow$inRiskSetAtTime_nj=cnt_n
#sum events and censored
loss=kmTableRow$eventsAtEventTime_ej+kmTableRow$censoredObservationsInInterval_cj
kmTableRow[c("kaplanMeirSurvivalCurveAtTime_s_tj-1")]=kmTable[dim(kmTable)[1],c("kaplanMeirSurvivalCurveAtTime_s_tj")]
#TOOK LAZY WAY OUT AND JUST ADDED BACK IN THE CENSORED OBS - WILL DO CORRECT WAY LATER I Hope
numerator=(cnt_n-loss+kmTableRow$censoredObservationsInInterval_cj)
denominator=cnt_n
kmTableRow[c("c_tj-1")]=paste0(numerator,"/",denominator)
kmTableRow$kaplanMeirSurvivalCurveAtTime_s_tj=round(numerator/denominator*as.numeric(kmTable[dim(kmTable)[1],c("kaplanMeirSurvivalCurveAtTime_s_tj")]),3)
#update count
cnt_n=cnt_n-loss
#don't add a row when no events 0 should put this at top but no time :0
if (kmTableRow$eventsAtEventTime_ej>0 | cnt_n==length(censoredTimesVectorNumeric)){
#add row to kmtable
kmTable=rbind(kmTable,kmTableRow)
}
}
}
kmTable
}
df2_lec_censored_noLT_KM=getKMTableNoCensorRemoval(df2_lec_censored_noLT,"+")
df2_lec_censored_noLT_KM
kmTable=data.frame()
getKMTableNoCensorRemoval = function(censoredTimesVector,censorSymbol){
#get numeric representation of censor vector
censoredTimesVectorNumeric=as.numeric(sub(censorSymbol,'',censoredTimesVector,fixed=TRUE))
#count number of actual rows in KM table
cnt_n=length(censoredTimesVectorNumeric)
#create first row of KM table
kmTable=setNames(data.frame(matrix(nrow=1,c(0,0,0,cnt_n,as.character("-"),as.character(paste0(cnt_n,"/",cnt_n)),1)),stringsAsFactors=FALSE),c("orderedEventTimes_tj","eventsAtEventTime_ej",
"censoredObservationsInInterval_cj","inRiskSetAtTime_nj","kaplanMeirSurvivalCurveAtTime_s_tj-1","c_tj-1","kaplanMeirSurvivalCurveAtTime_s_tj"))
# orderedIndices=order(censoredTimesVectorNumeric)
# censoredTimesVectorNumeric=censoredTimesVectorNumeric[orderedIndices]
# censoredTimesVector=censoredTimesVector[orderedIndices]
censoredTimesVectorNumeric=sort(censoredTimesVectorNumeric)
for (i in 1:max(censoredTimesVectorNumeric)){
if(i %in% censoredTimesVectorNumeric){
#create empty row to fill in
kmTableRow=setNames(data.frame(matrix(NA,nrow=1,ncol=length(names(kmTable)))),names(kmTable))
kmTableRow$orderedEventTimes_tj=i
#count how many events at time
kmTableRow$eventsAtEventTime_ej=length(which(censoredTimesVector==i))
#count how many censured at time
kmTableRow$censoredObservationsInInterval_cj=length(which(censoredTimesVector==paste0(i,censorSymbol)))
kmTableRow$inRiskSetAtTime_nj=cnt_n
#sum events and censored
loss=kmTableRow$eventsAtEventTime_ej+kmTableRow$censoredObservationsInInterval_cj
kmTableRow[c("kaplanMeirSurvivalCurveAtTime_s_tj-1")]=kmTable[dim(kmTable)[1],c("kaplanMeirSurvivalCurveAtTime_s_tj")]
#TOOK LAZY WAY OUT AND JUST ADDED BACK IN THE CENSORED OBS - WILL DO CORRECT WAY LATER I Hope
numerator=(cnt_n-loss+kmTableRow$censoredObservationsInInterval_cj)
denominator=cnt_n
kmTableRow[c("c_tj-1")]=paste0(numerator,"/",denominator)
kmTableRow$kaplanMeirSurvivalCurveAtTime_s_tj=round(numerator/denominator*as.numeric(kmTable[dim(kmTable)[1],c("kaplanMeirSurvivalCurveAtTime_s_tj")]),2)
#update count
cnt_n=cnt_n-loss
#don't add a row when no events 0 should put this at top but no time :0
if (kmTableRow$eventsAtEventTime_ej>0 | cnt_n==length(censoredTimesVectorNumeric)){
#add row to kmtable
kmTable=rbind(kmTable,kmTableRow)
}
}
}
kmTable
}
df2_lec_censored_noLT_KM=getKMTableNoCensorRemoval(df2_lec_censored_noLT,"+")
df2_lec_censored_noLT_KM
#column1 of book page 137 problem 4.7
entry_c1 = c(58,58,59,60,60,61,61,62,62,62,63,63,64,66,66)
exit_c1=c(60,63,69,62,65,72,69,73,66,65,68,74,71,68,69)
death_c1 = c(1,1,0,1,1,0,0,0,1,1,1,0,1,1,1)
#column1 of book page 137 problem 4.7
entry_c2=c(67,67,67,68,69,69,69,70,70,70,71,72,72,73,73)
exit_c2=c(70,77,69,72,79,72,70,76,71,78,79,76,73,80,74)
death_c2=c(1,1,1,1,0,1,1,0,1,0,0,1,1,0,1)
df2_lec = data.frame(cbind(c(entry_c1,entry_c2),c(exit_c1,exit_c2),c(death_c1,death_c2)))
df2_lec
df2_lec = setNames(data.frame(cbind(c(entry_c1,entry_c2),c(exit_c1,exit_c2),c(death_c1,death_c2))),c("entry","exit","death"))
df2_lec
#df2_lec_censored_noLT=c(60,63,"69+",62,65,"72+","69+","73+",66,65,68,"74+",71,68,69)
df2_lec_censored_noLT=c(60,63,"69+",62,65,"72+","69+","73+",66,65,68,"74+",71,68,69,70,77,69,72,"79+",72,70,"76+",71,"78+","79+",76,73,"80+",74)
#above code and data match output in lecture tables - now try problem data
df2_prob_LT=getKM_LT_Table(df2_prob,1)
df2_prob = setNames(data.frame(cbind(c(entry_c1,entry_c2),c(exit_c1,exit_c2),c(death_c1,death_c2))),c("entry","exit","death"))
df2_prob_censored_noLT=c(60,63,"69+",62,65,"72+","69+","73+",66,65,68,"74+",71,68,69,70,77,69,72,"79+",72,70,"76+",71,"78+","79+",76,73,"80+",74)
#above code and data match output in lecture tables - now try problem data
df2_prob_LT=getKM_LT_Table(df2_prob,1)
df2_prob_censored_noLT_KM=getKMTableNoCensorRemoval(df2_prob_censored_noLT,"+")
df2_prob_LT
df2_prob_censored_noLT_KM
View(df2_prob_LT)
df2_prob_censored_noLT_KM=getKMTableNoCensorRemoval(df2_prob_censored_noLT,"+")
View(df2_prob_censored_noLT_KM=getKMTableNoCensorRemoval(df2_prob_censored_noLT,"+"))
View(df2_prob_censored_noLT_KM)
show(azt_ddc_saq_KM)
azt_ddc_KM=getKMTable(azt_ddc,"+")
write.table(azt_ddc_KM,file="C:/Users/an052283/OneDrive - Cerner Corporation/MSASA/Stat-845/Homeworks/output/Homework1/azt_ddc_KM.tsv",sep="\t",row.names = FALSE)
write.table(azt_ddc_KM,file="C:/Users/an052283/OneDrive - Cerner Corporation/MSASA/Stat-845/Homeworks/output/Homework1/azt_ddc_KM.tsv",sep="\t",row.names = FALSE)
# write.table(azt_ddc_saq_KM,file="C:/Users/an052283/OneDrive - Cerner Corporation/MSASA/Stat-845/Homeworks/output/Homework1/azt_ddc_saq_KM.tsv",sep="\t",row.names = FALSE)
# write.table(azt_ddc_KM,file="C:/Users/an052283/OneDrive - Cerner Corporation/MSASA/Stat-845/Homeworks/output/Homework1/azt_ddc_KM.tsv",sep="\t",row.names = FALSE)
View(azt_ddc_KM)
azt_ddc=c("4+",6,11,12,32,35,"38+",39,45,49,75,80,84,85,87,102,"180+")
azt_ddc_KM=getKMTable(azt_ddc,"+")
# write.table(azt_ddc_saq_KM,file="C:/Users/an052283/OneDrive - Cerner Corporation/MSASA/Stat-845/Homeworks/output/Homework1/azt_ddc_saq_KM.tsv",sep="\t",row.names = FALSE)
# write.table(azt_ddc_KM,file="C:/Users/an052283/OneDrive - Cerner Corporation/MSASA/Stat-845/Homeworks/output/Homework1/azt_ddc_KM.tsv",sep="\t",row.names = FALSE)
View(azt_ddc_KM)
azt_ddc_saq_KM=getKMTable(azt_ddc_saq,"+")
View(azt_ddc_saq_KM)
azt_ddc
# kmTable=setNames(data.frame(matrix(NA,nrow=1,ncol=length(kmTableColumnNames))),kmTableColumnNames)
kmTable=data.frame()
azt_ddc_KM=getKMTable(azt_ddc,"+")
azt_ddc_KM
as.numeric(sub("+","",azt_ddc,fixed=TRUE))
ifelse(grepl("+",azt_ddc,fixed=TRUE),0,1))
ifelse(grepl("+",azt_ddc,fixed=TRUE),0,1)
length(ifelse(grepl("+",azt_ddc,fixed=TRUE),0,1)))
length(ifelse(grepl("+",azt_ddc,fixed=TRUE),0,1))
length(azt_ddc)
azt_ddc
Surv(as.numeric(sub("+","",azt_ddc,fixed=TRUE)),ifelse(grepl("+",azt_ddc,fixed=TRUE),0,1))
azt_ddc_KM_R=survfit(Surv(as.numeric(sub("+","",azt_ddc,fixed=TRUE)),ifelse(grepl("+",azt_ddc,fixed=TRUE),0,1))~1,conf.type="log-log")
azt_ddc_KM_R
summary(azt_ddc_KM_R)
15/16
azt_ddc_KM
kmTable=data.frame()
getKMTable = function(censoredTimesVector,censorSymbol){
#get numeric representation of censor vector
censoredTimesVectorNumeric=as.numeric(sub(censorSymbol,'',censoredTimesVector,fixed=TRUE))
#count number of actual rows in KM table
cnt_n=length(censoredTimesVectorNumeric)
#create first row of KM table
kmTable=setNames(data.frame(matrix(nrow=1,c(0,0,0,cnt_n,as.character("-"),as.character(paste0(cnt_n,"/",cnt_n)),1)),stringsAsFactors=FALSE),c("orderedEventTimes_tj","eventsAtEventTime_ej",
"censoredObservationsInInterval_cj","inRiskSetAtTime_nj","kaplanMeirSurvivalCurveAtTime_s_tj-1","c_tj-1","kaplanMeirSurvivalCurveAtTime_s_tj"))
# orderedIndices=order(censoredTimesVectorNumeric)
# censoredTimesVectorNumeric=censoredTimesVectorNumeric[orderedIndices]
# censoredTimesVector=censoredTimesVector[orderedIndices]
censoredTimesVectorNumeric=sort(censoredTimesVectorNumeric)
for (i in 1:max(censoredTimesVectorNumeric)){
if(i %in% censoredTimesVectorNumeric){
#create empty row to fill in
kmTableRow=setNames(data.frame(matrix(NA,nrow=1,ncol=length(names(kmTable)))),names(kmTable))
kmTableRow$orderedEventTimes_tj=i
#count how many events at time
kmTableRow$eventsAtEventTime_ej=length(which(censoredTimesVector==i))
#count how many censured at time
kmTableRow$censoredObservationsInInterval_cj=length(which(censoredTimesVector==paste0(i,censorSymbol)))
kmTableRow$inRiskSetAtTime_nj=cnt_n
#sum events and number censored at time
loss=kmTableRow$eventsAtEventTime_ej+kmTableRow$censoredObservationsInInterval_cj
kmTableRow[c("kaplanMeirSurvivalCurveAtTime_s_tj-1")]=kmTable[dim(kmTable)[1],c("kaplanMeirSurvivalCurveAtTime_s_tj")]
kmTableRow[c("c_tj-1")]=paste0((cnt_n-loss),"/",cnt_n)
#kmTableRow$kaplanMeirSurvivalCurveAtTime_s_tj=round((cnt_n-loss)/length(censoredTimesVectorNumeric),3)
kmTableRow$kaplanMeirSurvivalCurveAtTime_s_tj=round((cnt_n-loss)/cnt_n,3)
#update count
cnt_n=cnt_n-loss
#add row to kmtable
kmTable=rbind(kmTable,kmTableRow)
}
}
kmTable
}
azt_ddc_KM=getKMTable(azt_ddc,"+")
azt_ddc_saq_KM=getKMTable(azt_ddc_saq,"+")
azt_ddc_KM
kmTable=data.frame()
getKMTable = function(censoredTimesVector,censorSymbol){
#get numeric representation of censor vector
censoredTimesVectorNumeric=as.numeric(sub(censorSymbol,'',censoredTimesVector,fixed=TRUE))
#count number of actual rows in KM table
cnt_n=length(censoredTimesVectorNumeric)
#create first row of KM table
kmTable=setNames(data.frame(matrix(nrow=1,c(0,0,0,cnt_n,as.character("-"),as.character(paste0(cnt_n,"/",cnt_n)),1)),stringsAsFactors=FALSE),c("orderedEventTimes_tj","eventsAtEventTime_ej",
"censoredObservationsInInterval_cj","inRiskSetAtTime_nj","kaplanMeirSurvivalCurveAtTime_s_tj-1","c_tj-1","kaplanMeirSurvivalCurveAtTime_s_tj"))
# orderedIndices=order(censoredTimesVectorNumeric)
# censoredTimesVectorNumeric=censoredTimesVectorNumeric[orderedIndices]
# censoredTimesVector=censoredTimesVector[orderedIndices]
censoredTimesVectorNumeric=sort(censoredTimesVectorNumeric)
for (i in 1:max(censoredTimesVectorNumeric)){
if(i %in% censoredTimesVectorNumeric){
#create empty row to fill in
kmTableRow=setNames(data.frame(matrix(NA,nrow=1,ncol=length(names(kmTable)))),names(kmTable))
kmTableRow$orderedEventTimes_tj=i
#count how many events at time
kmTableRow$eventsAtEventTime_ej=length(which(censoredTimesVector==i))
#count how many censured at time
kmTableRow$censoredObservationsInInterval_cj=length(which(censoredTimesVector==paste0(i,censorSymbol)))
kmTableRow$inRiskSetAtTime_nj=cnt_n
#sum events and number censored at time
loss=kmTableRow$eventsAtEventTime_ej+kmTableRow$censoredObservationsInInterval_cj
kmTableRow[c("kaplanMeirSurvivalCurveAtTime_s_tj-1")]=kmTable[dim(kmTable)[1],c("kaplanMeirSurvivalCurveAtTime_s_tj")]
kmTableRow[c("c_tj-1")]=paste0((cnt_n-loss),"/",cnt_n)
#kmTableRow$kaplanMeirSurvivalCurveAtTime_s_tj=round((cnt_n-loss)/length(censoredTimesVectorNumeric),3)
kmTableRow$kaplanMeirSurvivalCurveAtTime_s_tj=round((cnt_n-loss)/cnt_n,4)
#update count
cnt_n=cnt_n-loss
#add row to kmtable
kmTable=rbind(kmTable,kmTableRow)
}
}
kmTable
}
azt_ddc_KM=getKMTable(azt_ddc,"+")
azt_ddc_saq_KM=getKMTable(azt_ddc_saq,"+")
azt_ddc_KM
summary(azt_ddc_KM_R)
15/16
14/15
15/17
14/17
14/16
14/15
14/17
14/18
14/.8125
?survfit
Surv(as.numeric(sub("+","",azt_ddc,fixed=TRUE)),ifelse(grepl("+",azt_ddc,fixed=TRUE),0,1))
azt_ddc_KM_R=survfit(Surv(as.numeric(sub("+","",azt_ddc,fixed=TRUE)),ifelse(grepl("+",azt_ddc,fixed=TRUE),0,1))~1,conf.type="log-log",type="kaplan-meier")
summary(azt_ddc_KM_R)
Surv(as.numeric(sub("+","",azt_ddc,fixed=TRUE)),ifelse(grepl("+",azt_ddc,fixed=TRUE),0,1))
azt_ddc_KM_R=survfit(Surv(as.numeric(sub("+","",azt_ddc,fixed=TRUE)),ifelse(grepl("+",azt_ddc,fixed=TRUE),0,1))~1,conf.type="log-log",type="aalen")
Surv(as.numeric(sub("+","",azt_ddc,fixed=TRUE)),ifelse(grepl("+",azt_ddc,fixed=TRUE),0,1))
azt_ddc_KM_R=survfit(Surv(as.numeric(sub("+","",azt_ddc,fixed=TRUE)),ifelse(grepl("+",azt_ddc,fixed=TRUE),0,1))~1,conf.type="log-log",type="“fleming-harrington”")
Surv(as.numeric(sub("+","",azt_ddc,fixed=TRUE)),ifelse(grepl("+",azt_ddc,fixed=TRUE),0,1))
azt_ddc_KM_R=survfit(Surv(as.numeric(sub("+","",azt_ddc,fixed=TRUE)),ifelse(grepl("+",azt_ddc,fixed=TRUE),0,1))~1,conf.type="log-log",type="fleming-harrington")
summary(azt_ddc_KM_R)
azt_ddc_KM_R=survfit(Surv(as.numeric(sub("+","",azt_ddc,fixed=TRUE)),ifelse(grepl("+",azt_ddc,fixed=TRUE),0,1))~1,conf.type="log",type="fleming-harrington")
summary(azt_ddc_KM_R)
View(lifeTableInputTable)
azt_ddc_KM
kmTable=data.frame()
getKMTable = function(censoredTimesVector,censorSymbol){
#get numeric representation of censor vector
censoredTimesVectorNumeric=as.numeric(sub(censorSymbol,'',censoredTimesVector,fixed=TRUE))
#count number of actual rows in KM table
cnt_n=length(censoredTimesVectorNumeric)
#create first row of KM table
kmTable=setNames(data.frame(matrix(nrow=1,c(0,0,0,cnt_n,as.character("-"),as.character(paste0(cnt_n,"/",cnt_n)),1)),stringsAsFactors=FALSE),c("orderedEventTimes_tj","eventsAtEventTime_ej",
"censoredObservationsInInterval_cj","inRiskSetAtTime_nj","kaplanMeirSurvivalCurveAtTime_s_tj-1","c_tj-1","kaplanMeirSurvivalCurveAtTime_s_tj"))
censoredTimesVectorNumeric=sort(censoredTimesVectorNumeric)
for (i in 1:max(censoredTimesVectorNumeric)){
if(i %in% censoredTimesVectorNumeric){
#create empty row to fill in
kmTableRow=setNames(data.frame(matrix(NA,nrow=1,ncol=length(names(kmTable)))),names(kmTable))
kmTableRow$orderedEventTimes_tj=i
#count how many events at time
kmTableRow$eventsAtEventTime_ej=length(which(censoredTimesVector==i))
#count how many censured at time
kmTableRow$censoredObservationsInInterval_cj=length(which(censoredTimesVector==paste0(i,censorSymbol)))
kmTableRow$inRiskSetAtTime_nj=cnt_n
#sum events and number censored at time
loss=kmTableRow$eventsAtEventTime_ej+kmTableRow$censoredObservationsInInterval_cj
prevSurv=kmTable[dim(kmTable)[1],c("kaplanMeirSurvivalCurveAtTime_s_tj")]
kmTableRow[c("kaplanMeirSurvivalCurveAtTime_s_tj-1")]=prevSurv
kmTableRow[c("c_tj-1")]=paste0((cnt_n-loss),"/",cnt_n)
#kmTableRow$kaplanMeirSurvivalCurveAtTime_s_tj=round((cnt_n-loss)/length(censoredTimesVectorNumeric),3)
kmTableRow$kaplanMeirSurvivalCurveAtTime_s_tj=round((cnt_n-loss)/cnt_n)*as.numeric(prevSurv),3)
kmTable=data.frame()
getKMTable = function(censoredTimesVector,censorSymbol){
#get numeric representation of censor vector
censoredTimesVectorNumeric=as.numeric(sub(censorSymbol,'',censoredTimesVector,fixed=TRUE))
#count number of actual rows in KM table
cnt_n=length(censoredTimesVectorNumeric)
#create first row of KM table
kmTable=setNames(data.frame(matrix(nrow=1,c(0,0,0,cnt_n,as.character("-"),as.character(paste0(cnt_n,"/",cnt_n)),1)),stringsAsFactors=FALSE),c("orderedEventTimes_tj","eventsAtEventTime_ej",
"censoredObservationsInInterval_cj","inRiskSetAtTime_nj","kaplanMeirSurvivalCurveAtTime_s_tj-1","c_tj-1","kaplanMeirSurvivalCurveAtTime_s_tj"))
censoredTimesVectorNumeric=sort(censoredTimesVectorNumeric)
for (i in 1:max(censoredTimesVectorNumeric)){
if(i %in% censoredTimesVectorNumeric){
#create empty row to fill in
kmTableRow=setNames(data.frame(matrix(NA,nrow=1,ncol=length(names(kmTable)))),names(kmTable))
kmTableRow$orderedEventTimes_tj=i
#count how many events at time
kmTableRow$eventsAtEventTime_ej=length(which(censoredTimesVector==i))
#count how many censured at time
kmTableRow$censoredObservationsInInterval_cj=length(which(censoredTimesVector==paste0(i,censorSymbol)))
kmTableRow$inRiskSetAtTime_nj=cnt_n
#sum events and number censored at time
loss=kmTableRow$eventsAtEventTime_ej+kmTableRow$censoredObservationsInInterval_cj
prevSurv=kmTable[dim(kmTable)[1],c("kaplanMeirSurvivalCurveAtTime_s_tj")]
kmTableRow[c("kaplanMeirSurvivalCurveAtTime_s_tj-1")]=prevSurv
kmTableRow[c("c_tj-1")]=paste0((cnt_n-loss),"/",cnt_n)
#kmTableRow$kaplanMeirSurvivalCurveAtTime_s_tj=round((cnt_n-loss)/length(censoredTimesVectorNumeric),3)
kmTableRow$kaplanMeirSurvivalCurveAtTime_s_tj=round((cnt_n-loss)/cnt_n*as.numeric(prevSurv),3)
#update count
cnt_n=cnt_n-loss
if(kmTableRow$censoredObservationsInInterval_cj==0){
#add row to kmtable
kmTable=rbind(kmTable,kmTableRow)
}
}
}
kmTable
}
azt_ddc_KM=getKMTable(azt_ddc,"+")
azt_ddc_KM
View(azt_ddc_KM)
azt_ddc_saq_KM=getKMTable(azt_ddc_saq,"+")
azt_ddc_saq_KM
View(azt_ddc_saq_KM)
library(KMsurv)
library(tidyverse)
getLifeTableInput = function(censoredTimesVector,censorSymbol){
#get numeric representation of censor vector
censoredTimesVectorNumeric=as.numeric(sub(censorSymbol,'',censoredTimesVector,fixed=TRUE))
#count number of actual rows in KM table
cnt_n=length(censoredTimesVectorNumeric)
#create first row of KM table
lifeTableInputTable=setNames(data.frame(matrix(nrow=1,c(NA,NA,NA)),stringsAsFactors=FALSE),c("time","nlost","nevent"))
censoredTimesVectorNumeric=sort(censoredTimesVectorNumeric)
for (i in 1:max(censoredTimesVectorNumeric)){
if(i %in% censoredTimesVectorNumeric){
#create empty row to fill in
lifeTableInputRow=setNames(data.frame(matrix(NA,nrow=1,ncol=length(names(lifeTableInputTable)))),names(lifeTableInputTable))
lifeTableInputRow$time=i
#count how many events at time
lifeTableInputRow$nevent=length(which(censoredTimesVector==i))
#count how many censured at time
lifeTableInputRow$nlost=length(which(censoredTimesVector==paste0(i,censorSymbol)))
lifeTableInputTable=rbind(lifeTableInputTable,lifeTableInputRow)
}
}
na.omit(lifeTableInputTable)
}
azt_ddc_numeric=as.numeric(gsub("+","",azt_ddc,fixed=TRUE))
cuts_ad=seq(0,max(azt_ddc_numeric),60)
#ensure no loss of upper bound when incrementing
if(max(azt_ddc_numeric)>cuts_ad[length(cuts_ad)]){cuts_ad=cuts_ad=c(cuts_ad,(max(azt_ddc_numeric)))}
azt_ddc_lt_raw=getLifeTableInput(azt_ddc,"+")
lifetab_dat=mutate(azt_ddc_lt_raw,time_cat = cut(time, cuts_ad)) %>% group_by(time_cat) %>% summarize(ilost=sum(nlost),ievent=sum(nevent))
azt_ddc_lt=lifetab(tis = c(0,azt_ddc_lt_raw$time), ninit = length(azt_ddc), nlost = azt_ddc_lt_raw$nlost, nevent = azt_ddc_lt_raw$nevent) %>% drop_na(hazard)
show(azt_ddc_lt)
azt_ddc_lt_60=lifetab(tis = cuts_ad, ninit = length(azt_ddc), nlost = lifetab_dat$ilost, nevent = lifetab_dat$ievent)
azt_ddc_saq_numeric=as.numeric(gsub("+","",azt_ddc_saq,fixed=TRUE))
cuts_ads=seq(0,max(azt_ddc_saq_numeric),by=60)
#ensure no loss of upper bound when incrementing
if(max(azt_ddc_saq_numeric)>cuts_ads[length(cuts_ads)]){cuts_ads=c(cuts_ads,(max(azt_ddc_saq_numeric)))}
azt_ddc_saq_lt_raw=getLifeTableInput(azt_ddc_saq,"+")
lifetab_dat=mutate(azt_ddc_saq_lt_raw,time_cat = cut(time, cuts_ads)) %>% group_by(time_cat) %>% summarize(ilost=sum(nlost),ievent=sum(nevent))
azt_ddc_saq_lt=lifetab(tis = c(0,azt_ddc_saq_lt_raw$time), ninit = length(azt_ddc_saq), nlost = azt_ddc_saq_lt_raw$nlost, nevent = azt_ddc_saq_lt_raw$nevent) %>% drop_na(hazard)
show(azt_ddc_saq_lt)
azt_ddc_saq_lt_60=lifetab(tis = cuts_ads, ninit = length(azt_ddc_saq), nlost = lifetab_dat$ilost, nevent = lifetab_dat$ievent)
#plot azt_ddc
plot(cuts_ad,c(0,azt_ddc_lt_60$hazard),type='l',ylab="Hazard function",xlab="days",xaxt="n",main="azt_ddc Life Table Hazard Function in 60 day windows")
axis(1, at = cuts_ad, las=1)
#plot azt_ddc_saq
plot(cuts_ads,c(0,azt_ddc_saq_lt_60$hazard),type='l',ylab="Hazard function",xlab="days",xaxt="n",main="azt_ddc_saq Life Table Hazard Function in 60 day windows")
axis(1, at = cuts_ads, las=1)
View(azt_ddc_lt)
View(azt_ddc_saq_lt)
rtr_example=c(3,4,"5+",6,"6+","8+",11,14,15,"16+")
decrement=0
#redistribute to right value
getRedistributeToRightTable = function(censoredTimesVector,censorSymbol){
#get numeric representation of censor vector
censoredTimesVectorNumeric=as.numeric(sub(censorSymbol,'',censoredTimesVector,fixed=TRUE))
#sort to ensure when determine step# omit correct last element
censoredTimesVector=censoredTimesVector[order(censoredTimesVectorNumeric)]
#count number of actual rows in RTR table
cnt_n=length(censoredTimesVectorNumeric)
steps=length(which(grepl(censorSymbol,censoredTimesVector[1:length(censoredTimesVector)-1],fixed=TRUE)))
#create first row of RTR table
rtrTable=setNames(data.frame(matrix(nrow=1,c(0,(1/cnt_n),"",1)),stringsAsFactors=FALSE),c("observation","decrement","action","S_t"))
censoredTimesVectorNumeric=sort(censoredTimesVectorNumeric)
decrement = 0
base=1/cnt_n
i=0
uniqueCensoredTimesVector=unique(censoredTimesVector)
for (dataPoint in uniqueCensoredTimesVector){
i=i+1
#create empty row to fill in
rtrTableRow=setNames(data.frame(matrix(NA,nrow=1,ncol=length(names(rtrTable)))),names(rtrTable))
rtrTableRow$observation=dataPoint
#count how many events or censures at unique dataPoint
numerator=length(which(censoredTimesVector==dataPoint))
#censured at time?
if(length(which(censoredTimesVector==dataPoint & grep(censorSymbol,dataPoint,fixed=TRUE)))>0){
#no change in survival function
rtrTableRow$S_t=rtrTable[dim(rtrTable)[1],c("S_t")]
#display decrement of 0
rtrTableRow$decrement=0
#update denominator
denominator=length(censoredTimesVector)-max(which(dataPoint == censoredTimesVector))
if(i==length(uniqueCensoredTimesVector)){
rtrTableRow$action=paste0("survival is 1-(1)")
rtrTableRow$S_t=0
rtrTableRow$decrement=1
}
else{
rtrTableRow$action=paste0("next time survival is 1-(",decrement," + ",base," + ",base,"*",numerator,"/",denominator,")")
}
if(length(uniqueCensoredTimesVector)>=(i+1) && (!grepl(censorSymbol,uniqueCensoredTimesVector[i+1],fixed=TRUE))){
#update decrement only if not proceeded by a censored observation
decrement = decrement + base+(base*numerator/denominator)
}
#update base
base=base+(base*numerator/denominator)
}
else{
#update decrement and show action
if (as.numeric(rtrTable[dim(rtrTable)[1],c("decrement")])==0)
{
rtrTableRow$action=paste0("survival is 1-(",decrement,")")
decrement = decrement
}
else{
decrement = decrement + base
rtrTableRow$action=paste0("survival is 1-(",decrement,")")
}
rtrTableRow$S_t=1-decrement
#update decrement display
rtrTableRow$decrement=decrement
}
#add row to rtrtable
rtrTable=rbind(rtrTable,rtrTableRow)
}
#eleminate initial bogus row
rtrTable$decrement=round(as.numeric(rtrTable$decrement),3)
rtrTable$S_t=round(as.numeric(rtrTable$S_t),3)
rtrTable[-1,]
}
azt_ddc_saq_RTR=getRedistributeToRightTable(azt_ddc_saq,"+")
azt_ddc_RTR=getRedistributeToRightTable(azt_ddc,"+")
show(azt_ddc_saq_RTR)
show(azt_ddc_RTR)
rtr_example_RTR = getRedistributeToRightTable(rtr_example,"+")
View(azt_ddc_RTR)
View(azt_ddc_saq_RTR)
